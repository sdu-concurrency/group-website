{ "title" : "2013",
  "papers": [
		{
	    "bibitem": "@PhdThesis{M13:phd,  author = {Fabrizio Montesi},  title = {Choreographic {P}rogramming},  school = \"IT University of Copenhagen\",  type = \"Ph.{D}. Thesis\",  year = 2013,  note = {\\url{http://www.fabriziomontesi.com/files/choreographic_programming.pdf}} }",
			"links": [
				{ "link" : "https://www.fabriziomontesi.com/files/choreographic_programming.pdf" },
				{ "name" : "EAPLS Best PhD Dissertation Award 2014",
					"link" : "http://eapls.org/items/1855/",
				 	"icon" : "website"
				}
			],
	    "tags": [ "Choreographic Programming", "Logic", "Jolie", "Microservices", "Process Calculi", "Logic", "Session Types" ],
	    "authors": [ "Fabrizio Montesi" ],
	    "abstract": "Choreographies are descriptions of distributed systems where the developer gives a global view of how messages are exchanged by endpoint nodes (endpoints for short), instead of separately defining the behaviour of each endpoint. They have a significant impact on the quality of software, as they offer a concise view of the message flows enacted by a system. For this reason, in the last decade choreographies have been employed in the development of programming languages, giving rise to a programming paradigm that in this dissertation we refer to as Choreographic Programming. Recent formal investigations of choreographies show that they have potential as foundations for the development of safe distributed software. The key idea is that since choreographies abstract from the single input/output actions of endpoints, they avoid typical safety problems such as deadlocks and race conditions; the concrete implementation of each endpoint described in a choreography can then be automatically obtained by compilation, ensuring that such implementations are also safe by construction from the originating choreography. However, current formal models for choreographies do not deal with critical aspects of distributed programming, such as asynchrony, mobility, modularity, and multiparty sessions; it remains thus unclear whether choreographies can still guarantee safety when dealing with such nontrivial features. This PhD dissertation argues for the usefulness of choreographic programming as a paradigm for the development of safe distributed systems. We proceed by investigating its foundations and application. To this aim we provide three main contributions. The first contribution is the development of a formal model and type theory for choreographic programming that support asynchrony, mobility, modular development, and multiparty sessions. We prove that our model guarantees safety by mapping choreographies to distributed implementations in terms of a variant of the π-calculus, the reference model for mobile processes. Our translation preserves the expected safety properties of choreographies, among which freedom from deadlocks and race conditions. The second contribution is the development of Linear Connection Logic (LCL), a formal logic that captures the reasoning behind choreographic programming. We show that LCL is a conservative extension of Linear Logic. We then develop a Curry-Howard correspondence between LCL and a calculus of choreographies, proving that: (i) proofs in LCL correspond to choreographies; and (ii) the transformations between proofs in LCL to proofs in Linear Logic and vice versa correspond to compiling choreography programs to π-calculus terms and vice versa. The latter result, known as round-trip development, contributes to the open problem of extracting choreographies from existing endpoint programs. The third contribution is the implementation of a prototype programming framework for choreographic programming, called Chor. Chor provides an Integrated Development Environment (IDE) for programming with choreographies, equipped with a type checker for verifying that choreographies respect protocol specifications given as session types. Programs in Chor can be compiled to executable endpoint implementation in the Jolie programming language, a general-purpose language for distributed computing, which we extend to support the development of multiparty asynchronous sessions. We use Chor for evaluating choreographic programming against a series of use cases.",
	    "non_group" : true,
	    "type": "PhD Thesis"
	  },
		{
			"bibitem" : "@inproceedings{DBLP:conf/concur/MontesiY13,  author = {Fabrizio Montesi and  Nobuko Yoshida},  editor = {Pedro R. D'Argenio and  Hern{\\'{a}}n C. Melgratti},  title = {Compositional Choreographies},  booktitle = {{CONCUR} 2013 - Concurrency Theory - 24th International Conference,  {CONCUR} 2013, Buenos Aires, Argentina, August 27-30, 2013. Proceedings},  series = {Lecture Notes in Computer Science},  volume = {8052},  pages = {425--439},  publisher = {Springer},  year = {2013},  url = {https://doi.org/10.1007/978-3-642-40184-8\\_30},  doi = {10.1007/978-3-642-40184-8\\_30},  timestamp = {Fri, 02 Jun 2017 20:50:29 +0200},  biburl = {https://dblp.org/rec/bib/conf/concur/MontesiY13},  bibsource = {dblp computer science bibliography, https://dblp.org} } ",
			"links" : [
				{ "link" : "https://www.fabriziomontesi.com/files/my13.pdf" }
			],
			"abstract" : "We propose a new programming model that supports a compositionality of choreographies. The key of our approach is the introduction of partial choreographies, which can mix global descriptions with communications among external peers. We prove that if two choreographies are composable, then the endpoints independently generated from each choreography are also composable, preserving their typability and deadlock-freedom. The usability of our framework is demonstrated by modelling an industrial use case implemented in a tool for Web Services, Jolie.",
			"tags" : [ "Choreographic Programming", "Session Types", "Jolie", "Microservices" ],
			"authors" : [ "Fabrizio Montesi" ],
			"non_group": true,
			"type" : "Conference"
		},
		{
			"bibitem" : "@inproceedings{DBLP:conf/popl/CarboneM13,  author = {Marco Carbone and  Fabrizio Montesi},  editor = {Roberto Giacobazzi and  Radhia Cousot},  title = {Deadlock-freedom-by-design: multiparty asynchronous global programming},  booktitle = {The 40th Annual {ACM} {SIGPLAN-SIGACT} Symposium on Principles of  Programming Languages, {POPL} '13, Rome, Italy - January 23 - 25,  2013},  pages = {263--274},  publisher = {{ACM}},  year = {2013},  url = {http://doi.acm.org/10.1145/2429069.2429101},  doi = {10.1145/2429069.2429101},  timestamp = {Mon, 05 Jun 2017 12:41:03 +0200},  biburl = {https://dblp.org/rec/bib/conf/popl/CarboneM13},  bibsource = {dblp computer science bibliography, https://dblp.org} } ",
			"links" : [
				{ "link" : "https://www.fabriziomontesi.com/files/cm13.pdf" }
			],
			"abstract" : "Over the last decade, global descriptions have been successfully employed for the verification and implementation of communicating systems, respectively as protocol specifications and choreographies. In this work, we bring these two practices together by proposing a purely-global programming model. We show a novel interpretation of asynchrony and parallelism in a global setting and develop a typing discipline that verifies choreographies against protocol specifications, based on multiparty sessions. Exploiting the nature of global descriptions, our type system defines a new class of deadlock-free concurrent systems (deadlock-freedom-bydesign), provides type inference, and supports session mobility. We give a notion of Endpoint Projection (EPP) which generates correct entity code (as π-calculus terms) from a choreography. Finally, we evaluate our approach by providing a prototype implementation for a concrete programming language and by applying it to some examples from multicore and service-oriented programming.",
			"tags" : [ "Choreographic Programming", "Session Types" ],
			"authors" : [ "Fabrizio Montesi" ],
			"non_group": true,
			"type" : "Conference"
		},
		{
			"bibitem" : "@inproceedings{DBLP:conf/sac/Montesi13,  author = {Fabrizio Montesi},  editor = {Sung Y. Shin and  Jos{\\'{e}} Carlos Maldonado},  title = {Process-aware web programming with Jolie},  booktitle = {Proceedings of the 28th Annual {ACM} Symposium on Applied Computing,  {SAC} '13, Coimbra, Portugal, March 18-22, 2013},  pages = {761--763},  publisher = {{ACM}},  year = {2013},  url = {http://doi.acm.org/10.1145/2480362.2480507},  doi = {10.1145/2480362.2480507},  timestamp = {Mon, 05 Jun 2017 12:41:15 +0200},  biburl = {https://dblp.org/rec/bib/conf/sac/Montesi13},  bibsource = {dblp computer science bibliography, https://dblp.org} }",
			"links" : [
				{ "link" : "https://www.fabriziomontesi.com/files/m13.pdf" }
			],
			"abstract" : "We present a programming framework, based upon the Jolie language, for the native modelling of process-aware web information systems. Our major contribution is to offer a unifying approach for the programming of distributed architectures based on HTTP that support typical features of the process-oriented paradigm, such as structured communication flows and multiparty sessions.",
			"tags" : [ "Jolie", "Microservices", "Web" ],
			"authors" : [ "Fabrizio Montesi" ],
			"non_group": true,
			"type" : "Conference"
		},
		{
			"bibitem" : "@inproceedings{DBLP:journals/corr/LaneseMZ13,  author = {Ivan Lanese and  Fabrizio Montesi and  Gianluigi Zavattaro},  editor = {Ant{\\'{o}}nio Ravara and  Josep Silva},  title = {Amending Choreographies},  booktitle = {Proceedings 9th International Workshop on Automated Specification  and Verification of Web Systems, {WWV} 2013, Florence, Italy, 6th  June 2013.},  series = {{EPTCS}},  volume = {123},  pages = {34--48},  year = {2013},  url = {https://doi.org/10.4204/EPTCS.123.5},  doi = {10.4204/EPTCS.123.5},  timestamp = {Mon, 05 Jun 2017 20:50:58 +0200},  biburl = {https://dblp.org/rec/bib/journals/corr/LaneseMZ13},  bibsource = {dblp computer science bibliography, https://dblp.org} } ",
			"links" : [
				{ "link" : "https://www.fabriziomontesi.com/files/lmz13.pdf" }
			],
			"abstract" : "Choreographies are global descriptions of system behaviors, from which the local behavior of each endpoint entity can be obtained automatically through projection. To guarantee that its projection is correct, i.e. it has the same behaviors of the original choreography, a choreography usually has to respect some coherency conditions. This restricts the set of choreographies that can be projected. In this paper, we present a transformation for amending choreographies that do not respect common syntactic conditions for projection correctness. Specifically, our transformation automatically reduces the amount of concurrency, and it infers and adds hidden communications that make the resulting choreography respect the desired conditions, while preserving its behavior.",
			"tags" : [ "Choreographic Programming" ],
			"authors" : [ "Fabrizio Montesi" ],
			"non_group": true,
			"type" : "Workshop"
		},
    {
    "bibitem": "@inproceedings{CEGN2013, author = {Cruz-Filipe, Lu{\\'i}s and Engr{\\' a}cia, Patr{\\'\\i}cia and Gaspar, Gra{\\c c}a and Nunes, Isabel}, booktitle = {2013 International Symposium on Theoretical Aspects of Software Engineering, Birmingham, UK, July 1st--July 3rd 2013}, editor = {Wang, Hai and Banach, Richard}, month = jul, doi = {10.1109/TASE.2013.32}, pages = {183--190}, publisher = {IEEE}, title = {Computing Repairs from Active Integrity Constraints}, year = 2013}",
    "links": [{
      "link": "https://imada.sdu.dk/~lcf/pubs/paper10.pdf"
    }],
    "tags": ["Database Repair"],
    "authors": ["Luís Cruz-Filipe"],
    "abstract": "Repairing an inconsistent knowledge base is a well-known problem for which several solutions have been proposed and implemented in the past.  In this paper, we start by looking at databases with active integrity constraints &ndash; consistency requirements that also indicate how the database should be updated when they are not met &ndash; as introduced by Caroprese et al.  We show that the different kinds of repairs considered by those authors can be effectively computed by searching for leaves of specific kinds of trees.  Although these computations are in general not very efficient (deciding the existence of a repair for a given database with active integrity constraints is NP-complete), on average the algorithms we present make significant reductions on the number of nodes in the search tree.  Finally, these algorithms also give an operational characterization of different kinds of repairs that can be used when we extend the concept of active integrity constraints to the more general setting of knowledge bases.",
    "non_group": true,
    "type": "conference"
  },
  {
    "bibitem": "@inproceedings{CNG2013, author = {Cruz-Filipe, Lu{\\'i}s and Nunes, Isabel and Gaspar, Gra{\\c c}a}, booktitle = {KEOD 2013 Proceedings of the International Conference on Knowledge Engineering and Ontology Development, Vilamoura, Algarve, Portugal, 19-22 September, 2013}, editor = {Filipe, Joaquim and Dietz, Jan}, month = sep, doi = {10.5220/0004544100580069}, pages = {58--69}, publisher = {SCITEPRESS}, title = {Patterns for Interfacing between Logic Programs and Multiple Ontologies}, year = 2013}",
    "links": [{
      "link": "https://imada.sdu.dk/~lcf/pubs/paper11.pdf"
    }],
    "tags": ["Knowledge Representation"],
    "authors": ["Luís Cruz-Filipe"],
    "abstract": "Originally proposed in the mid-90s, design patterns for software development played a key role in object-oriented programming not only in increasing software quality, but also by giving a better understanding of the power and limitations of this paradigm.  Since then, several authors have endorsed a similar task for other programming paradigms, in the hope of achieving similar benefits.<br />In this paper we discuss design patterns for hybrid semantic web systems combining several description logic knowledge bases via a logic program.  We introduce eight design patterns, grouped in three categories: three elementary patterns, which are the basic building blocks; four derived patterns, built from these; and a more complex pattern, the study of which can shed some insight in future syntactic developments of the underlying framework.  These patterns are extensively applied in a natural way in a large-scale example that illustrates how their usage greatly simplifies some programming tasks, at the level of both development and extension.<br />We work in a generalization of dl-programs that supports several (possibly different) description logics, but the results presented are easily adaptable to other existing frameworks such as multi-context systems.",
    "non_group": true,
    "type": "conference"
  },
  {
    "bibitem": "@inproceedings{CHN2013b, author = {Cruz-Filipe, Lu{\\'i}s and Henriques, Rita and Nunes, Isabel}, booktitle = {Logic for Programming, Artificial Intelligence, and Reasoning, 19th International Conference, LPAR-19, Stellenbosch, South Africa, December 2013, Proceedings}, editor = {McMillan, Kenneth L. and Middeldorp, Aart and Voronkov, Andrei}, month = dec, doi = {10.1007/978-3-642-45221-5\\_18}, pages = {243--257}, publisher = {Springer}, series = {LNCS}, title = {Description Logics, Rules and Multi-context Systems}, volume = 8312, year = 2013}",
    "links": [{
      "link": "https://imada.sdu.dk/~lcf/pubs/paper12.pdf"
    }],
    "tags": ["Knowledge Representation"],
    "authors": ["Luís Cruz-Filipe"],
    "abstract": "The combination of rules and ontologies has been a fertile topic of research in the last years, with the proposal of several different systems that achieve this goal.  In this paper, we look at two of these mechanisms, Mdl-programs and multi-context systems, which address different aspects of this combination, and include different, incomparable programming constructs.  Despite this, we show that every Mdl-program can be transformed in a multi-context system, and this transformation relates the different semantics for each paradigm in a natural way.  As an application, we show how a set of design patterns for multi-context systems can be obtained from previous work on Mdl-programs.",
    "non_group": true,
    "type": "conference"
  }
]
}
